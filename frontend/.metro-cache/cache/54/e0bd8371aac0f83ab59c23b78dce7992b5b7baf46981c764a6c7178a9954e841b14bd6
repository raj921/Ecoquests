{"dependencies":[{"name":"nanoid/non-secure","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":3,"column":0,"index":15},"end":{"line":3,"column":43,"index":58}}],"key":"SN8WVal79eAEDQEpzmVqVAy5JJs=","exportNames":["*"]}},{"name":"./BaseRouter.js","data":{"asyncType":null,"isESMImport":true,"locs":[{"start":{"line":4,"column":0,"index":59},"end":{"line":4,"column":45,"index":104}}],"key":"dJts27xOtIr7LbP/D7m0z2vzxHI=","exportNames":["*"]}}],"output":[{"data":{"code":"__d(function (global, require, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.TabActions = void 0;\n  exports.TabRouter = TabRouter;\n  var _nonSecure = require(_dependencyMap[0], \"nanoid/non-secure\");\n  var _BaseRouter = require(_dependencyMap[1], \"./BaseRouter.js\");\n  const TYPE_ROUTE = 'route';\n  const TabActions = exports.TabActions = {\n    jumpTo(name, params) {\n      return {\n        type: 'JUMP_TO',\n        payload: {\n          name,\n          params\n        }\n      };\n    }\n  };\n  const getRouteHistory = (routes, index, backBehavior, initialRouteName) => {\n    const history = [{\n      type: TYPE_ROUTE,\n      key: routes[index].key\n    }];\n    let initialRouteIndex;\n    switch (backBehavior) {\n      case 'order':\n        for (let i = index; i > 0; i--) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[i - 1].key\n          });\n        }\n        break;\n      case 'firstRoute':\n        if (index !== 0) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[0].key\n          });\n        }\n        break;\n      case 'initialRoute':\n        initialRouteIndex = routes.findIndex(route => route.name === initialRouteName);\n        initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n        if (index !== initialRouteIndex) {\n          history.unshift({\n            type: TYPE_ROUTE,\n            key: routes[initialRouteIndex].key\n          });\n        }\n        break;\n      case 'history':\n      case 'fullHistory':\n        // The history will fill up on navigation\n        break;\n    }\n    return history;\n  };\n  const changeIndex = (state, index, backBehavior, initialRouteName) => {\n    let history = state.history;\n    if (backBehavior === 'history' || backBehavior === 'fullHistory') {\n      const currentRoute = state.routes[index];\n      if (backBehavior === 'history') {\n        // Remove the existing key from the history to de-duplicate it\n        history = history.filter(it => it.type === 'route' ? it.key !== currentRoute.key : false);\n      } else if (backBehavior === 'fullHistory') {\n        const lastHistoryRouteItemIndex = history.findLastIndex(item => item.type === 'route');\n        if (currentRoute.key === history[lastHistoryRouteItemIndex]?.key) {\n          // For full-history, only remove if it matches the last route\n          // Useful for drawer, if current route was in history, then drawer state changed\n          // Then we only need to move the route to the front\n          history = [...history.slice(0, lastHistoryRouteItemIndex), ...history.slice(lastHistoryRouteItemIndex + 1)];\n        }\n      }\n      history = history.concat({\n        type: TYPE_ROUTE,\n        key: currentRoute.key,\n        params: backBehavior === 'fullHistory' ? currentRoute.params : undefined\n      });\n    } else {\n      history = getRouteHistory(state.routes, index, backBehavior, initialRouteName);\n    }\n    return Object.assign({}, state, {\n      index,\n      history\n    });\n  };\n  function TabRouter({\n    initialRouteName,\n    backBehavior = 'firstRoute'\n  }) {\n    const router = Object.assign({}, _BaseRouter.BaseRouter, {\n      type: 'tab',\n      getInitialState({\n        routeNames,\n        routeParamList\n      }) {\n        const index = initialRouteName !== undefined && routeNames.includes(initialRouteName) ? routeNames.indexOf(initialRouteName) : 0;\n        const routes = routeNames.map(name => ({\n          name,\n          key: `${name}-${(0, _nonSecure.nanoid)()}`,\n          params: routeParamList[name]\n        }));\n        const history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        return {\n          stale: false,\n          type: 'tab',\n          key: `tab-${(0, _nonSecure.nanoid)()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n          preloadedRouteKeys: []\n        };\n      },\n      getRehydratedState(partialState, {\n        routeNames,\n        routeParamList\n      }) {\n        const state = partialState;\n        if (state.stale === false) {\n          return state;\n        }\n        const routes = routeNames.map(name => {\n          const route = state.routes.find(r => r.name === name);\n          return Object.assign({}, route, {\n            name,\n            key: route && route.name === name && route.key ? route.key : `${name}-${(0, _nonSecure.nanoid)()}`,\n            params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], route ? route.params : undefined) : route ? route.params : undefined\n          });\n        });\n        const index = Math.min(Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0), routes.length - 1);\n        const routeKeys = routes.map(route => route.key);\n        const history = state.history?.filter(it => routeKeys.includes(it.key)) ?? [];\n        return changeIndex({\n          stale: false,\n          type: 'tab',\n          key: `tab-${(0, _nonSecure.nanoid)()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n          preloadedRouteKeys: state.preloadedRouteKeys?.filter(key => routeKeys.includes(key)) ?? []\n        }, index, backBehavior, initialRouteName);\n      },\n      getStateForRouteNamesChange(state, {\n        routeNames,\n        routeParamList,\n        routeKeyChanges\n      }) {\n        const routes = routeNames.map(name => state.routes.find(r => r.name === name && !routeKeyChanges.includes(r.name)) || {\n          name,\n          key: `${name}-${(0, _nonSecure.nanoid)()}`,\n          params: routeParamList[name]\n        });\n        const index = Math.max(0, routeNames.indexOf(state.routes[state.index].name));\n        let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        it => it.type !== 'route' || routes.find(r => r.key === it.key));\n        if (!history.length) {\n          history = getRouteHistory(routes, index, backBehavior, initialRouteName);\n        }\n        return Object.assign({}, state, {\n          history,\n          routeNames,\n          routes,\n          index\n        });\n      },\n      getStateForRouteFocus(state, key) {\n        const index = state.routes.findIndex(r => r.key === key);\n        if (index === -1 || index === state.index) {\n          return state;\n        }\n        return changeIndex(state, index, backBehavior, initialRouteName);\n      },\n      getStateForAction(state, action, {\n        routeParamList,\n        routeGetIdList\n      }) {\n        switch (action.type) {\n          case 'JUMP_TO':\n          case 'NAVIGATE':\n          case 'NAVIGATE_DEPRECATED':\n            {\n              const index = state.routes.findIndex(route => route.name === action.payload.name);\n              if (index === -1) {\n                return null;\n              }\n              const updatedState = changeIndex(Object.assign({}, state, {\n                routes: state.routes.map(route => {\n                  if (route.name !== action.payload.name) {\n                    return route;\n                  }\n                  const getId = routeGetIdList[route.name];\n                  const currentId = getId?.({\n                    params: route.params\n                  });\n                  const nextId = getId?.({\n                    params: action.payload.params\n                  });\n                  const key = currentId === nextId ? route.key : `${route.name}-${(0, _nonSecure.nanoid)()}`;\n                  let params;\n                  if ((action.type === 'NAVIGATE' || action.type === 'NAVIGATE_DEPRECATED') && action.payload.merge && currentId === nextId) {\n                    params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params, action.payload.params) : route.params;\n                  } else {\n                    params = routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : action.payload.params;\n                  }\n                  const path = action.type === 'NAVIGATE' && action.payload.path != null ? action.payload.path : route.path;\n                  return params !== route.params || path !== route.path ? Object.assign({}, route, {\n                    key,\n                    path,\n                    params\n                  }) : route;\n                })\n              }), index, backBehavior, initialRouteName);\n              return Object.assign({}, updatedState, {\n                preloadedRouteKeys: updatedState.preloadedRouteKeys.filter(key => key !== state.routes[updatedState.index].key)\n              });\n            }\n          case 'SET_PARAMS':\n          case 'REPLACE_PARAMS':\n            {\n              const nextState = _BaseRouter.BaseRouter.getStateForAction(state, action);\n              if (nextState !== null) {\n                const index = nextState.index;\n                if (index != null) {\n                  const focusedRoute = nextState.routes[index];\n                  const historyItemIndex = state.history.findLastIndex(item => item.key === focusedRoute.key);\n                  let updatedHistory = state.history;\n                  if (historyItemIndex !== -1) {\n                    updatedHistory = [...state.history];\n                    updatedHistory[historyItemIndex] = Object.assign({}, updatedHistory[historyItemIndex], {\n                      params: focusedRoute.params\n                    });\n                  }\n                  return Object.assign({}, nextState, {\n                    history: updatedHistory\n                  });\n                }\n              }\n              return nextState;\n            }\n          case 'GO_BACK':\n            {\n              if (state.history.length === 1) {\n                return null;\n              }\n              const previousHistoryItem = state.history[state.history.length - 2];\n              const previousKey = previousHistoryItem?.key;\n              const index = state.routes.findLastIndex(route => route.key === previousKey);\n              if (index === -1) {\n                return null;\n              }\n              let routes = state.routes;\n              if (backBehavior === 'fullHistory' && routes[index].params !== previousHistoryItem.params) {\n                routes = [...state.routes];\n                routes[index] = Object.assign({}, routes[index], {\n                  params: previousHistoryItem.params\n                });\n              }\n              return Object.assign({}, state, {\n                routes,\n                preloadedRouteKeys: state.preloadedRouteKeys.filter(key => key !== state.routes[index].key),\n                history: state.history.slice(0, -1),\n                index\n              });\n            }\n          case 'PRELOAD':\n            {\n              const routeIndex = state.routes.findIndex(route => route.name === action.payload.name);\n              if (routeIndex === -1) {\n                return null;\n              }\n              const route = state.routes[routeIndex];\n              const getId = routeGetIdList[route.name];\n              const currentId = getId?.({\n                params: route.params\n              });\n              const nextId = getId?.({\n                params: action.payload.params\n              });\n              const key = currentId === nextId ? route.key : `${route.name}-${(0, _nonSecure.nanoid)()}`;\n              const params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : undefined;\n              const newRoute = params !== route.params ? Object.assign({}, route, {\n                key,\n                params\n              }) : route;\n              return Object.assign({}, state, {\n                preloadedRouteKeys: state.preloadedRouteKeys.filter(key => key !== route.key).concat(newRoute.key),\n                routes: state.routes.map((route, index) => index === routeIndex ? newRoute : route),\n                history: key === route.key ? state.history : state.history.filter(record => record.key !== route.key)\n              });\n            }\n          default:\n            return _BaseRouter.BaseRouter.getStateForAction(state, action);\n        }\n      },\n      actionCreators: TabActions\n    });\n    return router;\n  }\n});","lineCount":307,"map":[[2,2,1,0],[2,14,1,12],[4,2,1,13,"Object"],[4,8,1,13],[4,9,1,13,"defineProperty"],[4,23,1,13],[4,24,1,13,"exports"],[4,31,1,13],[5,4,1,13,"value"],[5,9,1,13],[6,2,1,13],[7,2,1,13,"exports"],[7,9,1,13],[7,10,1,13,"TabActions"],[7,20,1,13],[8,2,1,13,"exports"],[8,9,1,13],[8,10,1,13,"TabRouter"],[8,19,1,13],[8,22,1,13,"TabRouter"],[8,31,1,13],[9,2,3,0],[9,6,3,0,"_nonSecure"],[9,16,3,0],[9,19,3,0,"require"],[9,26,3,0],[9,27,3,0,"_dependencyMap"],[9,41,3,0],[10,2,4,0],[10,6,4,0,"_BaseRouter"],[10,17,4,0],[10,20,4,0,"require"],[10,27,4,0],[10,28,4,0,"_dependencyMap"],[10,42,4,0],[11,2,5,0],[11,8,5,6,"TYPE_ROUTE"],[11,18,5,16],[11,21,5,19],[11,28,5,26],[12,2,6,7],[12,8,6,13,"TabActions"],[12,18,6,23],[12,21,6,23,"exports"],[12,28,6,23],[12,29,6,23,"TabActions"],[12,39,6,23],[12,42,6,26],[13,4,7,2,"jumpTo"],[13,10,7,8,"jumpTo"],[13,11,7,9,"name"],[13,15,7,13],[13,17,7,15,"params"],[13,23,7,21],[13,25,7,23],[14,6,8,4],[14,13,8,11],[15,8,9,6,"type"],[15,12,9,10],[15,14,9,12],[15,23,9,21],[16,8,10,6,"payload"],[16,15,10,13],[16,17,10,15],[17,10,11,8,"name"],[17,14,11,12],[18,10,12,8,"params"],[19,8,13,6],[20,6,14,4],[20,7,14,5],[21,4,15,2],[22,2,16,0],[22,3,16,1],[23,2,17,0],[23,8,17,6,"getRouteHistory"],[23,23,17,21],[23,26,17,24,"getRouteHistory"],[23,27,17,25,"routes"],[23,33,17,31],[23,35,17,33,"index"],[23,40,17,38],[23,42,17,40,"backBehavior"],[23,54,17,52],[23,56,17,54,"initialRouteName"],[23,72,17,70],[23,77,17,75],[24,4,18,2],[24,10,18,8,"history"],[24,17,18,15],[24,20,18,18],[24,21,18,19],[25,6,19,4,"type"],[25,10,19,8],[25,12,19,10,"TYPE_ROUTE"],[25,22,19,20],[26,6,20,4,"key"],[26,9,20,7],[26,11,20,9,"routes"],[26,17,20,15],[26,18,20,16,"index"],[26,23,20,21],[26,24,20,22],[26,25,20,23,"key"],[27,4,21,2],[27,5,21,3],[27,6,21,4],[28,4,22,2],[28,8,22,6,"initialRouteIndex"],[28,25,22,23],[29,4,23,2],[29,12,23,10,"backBehavior"],[29,24,23,22],[30,6,24,4],[30,11,24,9],[30,18,24,16],[31,8,25,6],[31,13,25,11],[31,17,25,15,"i"],[31,18,25,16],[31,21,25,19,"index"],[31,26,25,24],[31,28,25,26,"i"],[31,29,25,27],[31,32,25,30],[31,33,25,31],[31,35,25,33,"i"],[31,36,25,34],[31,38,25,36],[31,40,25,38],[32,10,26,8,"history"],[32,17,26,15],[32,18,26,16,"unshift"],[32,25,26,23],[32,26,26,24],[33,12,27,10,"type"],[33,16,27,14],[33,18,27,16,"TYPE_ROUTE"],[33,28,27,26],[34,12,28,10,"key"],[34,15,28,13],[34,17,28,15,"routes"],[34,23,28,21],[34,24,28,22,"i"],[34,25,28,23],[34,28,28,26],[34,29,28,27],[34,30,28,28],[34,31,28,29,"key"],[35,10,29,8],[35,11,29,9],[35,12,29,10],[36,8,30,6],[37,8,31,6],[38,6,32,4],[38,11,32,9],[38,23,32,21],[39,8,33,6],[39,12,33,10,"index"],[39,17,33,15],[39,22,33,20],[39,23,33,21],[39,25,33,23],[40,10,34,8,"history"],[40,17,34,15],[40,18,34,16,"unshift"],[40,25,34,23],[40,26,34,24],[41,12,35,10,"type"],[41,16,35,14],[41,18,35,16,"TYPE_ROUTE"],[41,28,35,26],[42,12,36,10,"key"],[42,15,36,13],[42,17,36,15,"routes"],[42,23,36,21],[42,24,36,22],[42,25,36,23],[42,26,36,24],[42,27,36,25,"key"],[43,10,37,8],[43,11,37,9],[43,12,37,10],[44,8,38,6],[45,8,39,6],[46,6,40,4],[46,11,40,9],[46,25,40,23],[47,8,41,6,"initialRouteIndex"],[47,25,41,23],[47,28,41,26,"routes"],[47,34,41,32],[47,35,41,33,"findIndex"],[47,44,41,42],[47,45,41,43,"route"],[47,50,41,48],[47,54,41,52,"route"],[47,59,41,57],[47,60,41,58,"name"],[47,64,41,62],[47,69,41,67,"initialRouteName"],[47,85,41,83],[47,86,41,84],[48,8,42,6,"initialRouteIndex"],[48,25,42,23],[48,28,42,26,"initialRouteIndex"],[48,45,42,43],[48,50,42,48],[48,51,42,49],[48,52,42,50],[48,55,42,53],[48,56,42,54],[48,59,42,57,"initialRouteIndex"],[48,76,42,74],[49,8,43,6],[49,12,43,10,"index"],[49,17,43,15],[49,22,43,20,"initialRouteIndex"],[49,39,43,37],[49,41,43,39],[50,10,44,8,"history"],[50,17,44,15],[50,18,44,16,"unshift"],[50,25,44,23],[50,26,44,24],[51,12,45,10,"type"],[51,16,45,14],[51,18,45,16,"TYPE_ROUTE"],[51,28,45,26],[52,12,46,10,"key"],[52,15,46,13],[52,17,46,15,"routes"],[52,23,46,21],[52,24,46,22,"initialRouteIndex"],[52,41,46,39],[52,42,46,40],[52,43,46,41,"key"],[53,10,47,8],[53,11,47,9],[53,12,47,10],[54,8,48,6],[55,8,49,6],[56,6,50,4],[56,11,50,9],[56,20,50,18],[57,6,51,4],[57,11,51,9],[57,24,51,22],[58,8,52,6],[59,8,53,6],[60,4,54,2],[61,4,55,2],[61,11,55,9,"history"],[61,18,55,16],[62,2,56,0],[62,3,56,1],[63,2,57,0],[63,8,57,6,"changeIndex"],[63,19,57,17],[63,22,57,20,"changeIndex"],[63,23,57,21,"state"],[63,28,57,26],[63,30,57,28,"index"],[63,35,57,33],[63,37,57,35,"backBehavior"],[63,49,57,47],[63,51,57,49,"initialRouteName"],[63,67,57,65],[63,72,57,70],[64,4,58,2],[64,8,58,6,"history"],[64,15,58,13],[64,18,58,16,"state"],[64,23,58,21],[64,24,58,22,"history"],[64,31,58,29],[65,4,59,2],[65,8,59,6,"backBehavior"],[65,20,59,18],[65,25,59,23],[65,34,59,32],[65,38,59,36,"backBehavior"],[65,50,59,48],[65,55,59,53],[65,68,59,66],[65,70,59,68],[66,6,60,4],[66,12,60,10,"currentRoute"],[66,24,60,22],[66,27,60,25,"state"],[66,32,60,30],[66,33,60,31,"routes"],[66,39,60,37],[66,40,60,38,"index"],[66,45,60,43],[66,46,60,44],[67,6,61,4],[67,10,61,8,"backBehavior"],[67,22,61,20],[67,27,61,25],[67,36,61,34],[67,38,61,36],[68,8,62,6],[69,8,63,6,"history"],[69,15,63,13],[69,18,63,16,"history"],[69,25,63,23],[69,26,63,24,"filter"],[69,32,63,30],[69,33,63,31,"it"],[69,35,63,33],[69,39,63,37,"it"],[69,41,63,39],[69,42,63,40,"type"],[69,46,63,44],[69,51,63,49],[69,58,63,56],[69,61,63,59,"it"],[69,63,63,61],[69,64,63,62,"key"],[69,67,63,65],[69,72,63,70,"currentRoute"],[69,84,63,82],[69,85,63,83,"key"],[69,88,63,86],[69,91,63,89],[69,96,63,94],[69,97,63,95],[70,6,64,4],[70,7,64,5],[70,13,64,11],[70,17,64,15,"backBehavior"],[70,29,64,27],[70,34,64,32],[70,47,64,45],[70,49,64,47],[71,8,65,6],[71,14,65,12,"lastHistoryRouteItemIndex"],[71,39,65,37],[71,42,65,40,"history"],[71,49,65,47],[71,50,65,48,"findLastIndex"],[71,63,65,61],[71,64,65,62,"item"],[71,68,65,66],[71,72,65,70,"item"],[71,76,65,74],[71,77,65,75,"type"],[71,81,65,79],[71,86,65,84],[71,93,65,91],[71,94,65,92],[72,8,66,6],[72,12,66,10,"currentRoute"],[72,24,66,22],[72,25,66,23,"key"],[72,28,66,26],[72,33,66,31,"history"],[72,40,66,38],[72,41,66,39,"lastHistoryRouteItemIndex"],[72,66,66,64],[72,67,66,65],[72,69,66,67,"key"],[72,72,66,70],[72,74,66,72],[73,10,67,8],[74,10,68,8],[75,10,69,8],[76,10,70,8,"history"],[76,17,70,15],[76,20,70,18],[76,21,70,19],[76,24,70,22,"history"],[76,31,70,29],[76,32,70,30,"slice"],[76,37,70,35],[76,38,70,36],[76,39,70,37],[76,41,70,39,"lastHistoryRouteItemIndex"],[76,66,70,64],[76,67,70,65],[76,69,70,67],[76,72,70,70,"history"],[76,79,70,77],[76,80,70,78,"slice"],[76,85,70,83],[76,86,70,84,"lastHistoryRouteItemIndex"],[76,111,70,109],[76,114,70,112],[76,115,70,113],[76,116,70,114],[76,117,70,115],[77,8,71,6],[78,6,72,4],[79,6,73,4,"history"],[79,13,73,11],[79,16,73,14,"history"],[79,23,73,21],[79,24,73,22,"concat"],[79,30,73,28],[79,31,73,29],[80,8,74,6,"type"],[80,12,74,10],[80,14,74,12,"TYPE_ROUTE"],[80,24,74,22],[81,8,75,6,"key"],[81,11,75,9],[81,13,75,11,"currentRoute"],[81,25,75,23],[81,26,75,24,"key"],[81,29,75,27],[82,8,76,6,"params"],[82,14,76,12],[82,16,76,14,"backBehavior"],[82,28,76,26],[82,33,76,31],[82,46,76,44],[82,49,76,47,"currentRoute"],[82,61,76,59],[82,62,76,60,"params"],[82,68,76,66],[82,71,76,69,"undefined"],[83,6,77,4],[83,7,77,5],[83,8,77,6],[84,4,78,2],[84,5,78,3],[84,11,78,9],[85,6,79,4,"history"],[85,13,79,11],[85,16,79,14,"getRouteHistory"],[85,31,79,29],[85,32,79,30,"state"],[85,37,79,35],[85,38,79,36,"routes"],[85,44,79,42],[85,46,79,44,"index"],[85,51,79,49],[85,53,79,51,"backBehavior"],[85,65,79,63],[85,67,79,65,"initialRouteName"],[85,83,79,81],[85,84,79,82],[86,4,80,2],[87,4,81,2],[87,11,81,2,"Object"],[87,17,81,2],[87,18,81,2,"assign"],[87,24,81,2],[87,29,82,7,"state"],[87,34,82,12],[88,6,83,4,"index"],[88,11,83,9],[89,6,84,4,"history"],[90,4,84,11],[91,2,86,0],[91,3,86,1],[92,2,87,7],[92,11,87,16,"TabRouter"],[92,20,87,25,"TabRouter"],[92,21,87,26],[93,4,88,2,"initialRouteName"],[93,20,88,18],[94,4,89,2,"backBehavior"],[94,16,89,14],[94,19,89,17],[95,2,90,0],[95,3,90,1],[95,5,90,3],[96,4,91,2],[96,10,91,8,"router"],[96,16,91,14],[96,19,91,14,"Object"],[96,25,91,14],[96,26,91,14,"assign"],[96,32,91,14],[96,37,92,7,"BaseRouter"],[96,59,92,17],[97,6,93,4,"type"],[97,10,93,8],[97,12,93,10],[97,17,93,15],[98,6,94,4,"getInitialState"],[98,21,94,19,"getInitialState"],[98,22,94,20],[99,8,95,6,"routeNames"],[99,18,95,16],[100,8,96,6,"routeParamList"],[101,6,97,4],[101,7,97,5],[101,9,97,7],[102,8,98,6],[102,14,98,12,"index"],[102,19,98,17],[102,22,98,20,"initialRouteName"],[102,38,98,36],[102,43,98,41,"undefined"],[102,52,98,50],[102,56,98,54,"routeNames"],[102,66,98,64],[102,67,98,65,"includes"],[102,75,98,73],[102,76,98,74,"initialRouteName"],[102,92,98,90],[102,93,98,91],[102,96,98,94,"routeNames"],[102,106,98,104],[102,107,98,105,"indexOf"],[102,114,98,112],[102,115,98,113,"initialRouteName"],[102,131,98,129],[102,132,98,130],[102,135,98,133],[102,136,98,134],[103,8,99,6],[103,14,99,12,"routes"],[103,20,99,18],[103,23,99,21,"routeNames"],[103,33,99,31],[103,34,99,32,"map"],[103,37,99,35],[103,38,99,36,"name"],[103,42,99,40],[103,47,99,45],[104,10,100,8,"name"],[104,14,100,12],[105,10,101,8,"key"],[105,13,101,11],[105,15,101,13],[105,18,101,16,"name"],[105,22,101,20],[105,26,101,24],[105,30,101,24,"nanoid"],[105,47,101,30],[105,49,101,31],[105,50,101,32],[105,52,101,34],[106,10,102,8,"params"],[106,16,102,14],[106,18,102,16,"routeParamList"],[106,32,102,30],[106,33,102,31,"name"],[106,37,102,35],[107,8,103,6],[107,9,103,7],[107,10,103,8],[107,11,103,9],[108,8,104,6],[108,14,104,12,"history"],[108,21,104,19],[108,24,104,22,"getRouteHistory"],[108,39,104,37],[108,40,104,38,"routes"],[108,46,104,44],[108,48,104,46,"index"],[108,53,104,51],[108,55,104,53,"backBehavior"],[108,67,104,65],[108,69,104,67,"initialRouteName"],[108,85,104,83],[108,86,104,84],[109,8,105,6],[109,15,105,13],[110,10,106,8,"stale"],[110,15,106,13],[110,17,106,15],[110,22,106,20],[111,10,107,8,"type"],[111,14,107,12],[111,16,107,14],[111,21,107,19],[112,10,108,8,"key"],[112,13,108,11],[112,15,108,13],[112,22,108,20],[112,26,108,20,"nanoid"],[112,43,108,26],[112,45,108,27],[112,46,108,28],[112,48,108,30],[113,10,109,8,"index"],[113,15,109,13],[114,10,110,8,"routeNames"],[114,20,110,18],[115,10,111,8,"history"],[115,17,111,15],[116,10,112,8,"routes"],[116,16,112,14],[117,10,113,8,"preloadedRouteKeys"],[117,28,113,26],[117,30,113,28],[118,8,114,6],[118,9,114,7],[119,6,115,4],[119,7,115,5],[120,6,116,4,"getRehydratedState"],[120,24,116,22,"getRehydratedState"],[120,25,116,23,"partialState"],[120,37,116,35],[120,39,116,37],[121,8,117,6,"routeNames"],[121,18,117,16],[122,8,118,6,"routeParamList"],[123,6,119,4],[123,7,119,5],[123,9,119,7],[124,8,120,6],[124,14,120,12,"state"],[124,19,120,17],[124,22,120,20,"partialState"],[124,34,120,32],[125,8,121,6],[125,12,121,10,"state"],[125,17,121,15],[125,18,121,16,"stale"],[125,23,121,21],[125,28,121,26],[125,33,121,31],[125,35,121,33],[126,10,122,8],[126,17,122,15,"state"],[126,22,122,20],[127,8,123,6],[128,8,124,6],[128,14,124,12,"routes"],[128,20,124,18],[128,23,124,21,"routeNames"],[128,33,124,31],[128,34,124,32,"map"],[128,37,124,35],[128,38,124,36,"name"],[128,42,124,40],[128,46,124,44],[129,10,125,8],[129,16,125,14,"route"],[129,21,125,19],[129,24,125,22,"state"],[129,29,125,27],[129,30,125,28,"routes"],[129,36,125,34],[129,37,125,35,"find"],[129,41,125,39],[129,42,125,40,"r"],[129,43,125,41],[129,47,125,45,"r"],[129,48,125,46],[129,49,125,47,"name"],[129,53,125,51],[129,58,125,56,"name"],[129,62,125,60],[129,63,125,61],[130,10,126,8],[130,17,126,8,"Object"],[130,23,126,8],[130,24,126,8,"assign"],[130,30,126,8],[130,35,127,13,"route"],[130,40,127,18],[131,12,128,10,"name"],[131,16,128,14],[132,12,129,10,"key"],[132,15,129,13],[132,17,129,15,"route"],[132,22,129,20],[132,26,129,24,"route"],[132,31,129,29],[132,32,129,30,"name"],[132,36,129,34],[132,41,129,39,"name"],[132,45,129,43],[132,49,129,47,"route"],[132,54,129,52],[132,55,129,53,"key"],[132,58,129,56],[132,61,129,59,"route"],[132,66,129,64],[132,67,129,65,"key"],[132,70,129,68],[132,73,129,71],[132,76,129,74,"name"],[132,80,129,78],[132,84,129,82],[132,88,129,82,"nanoid"],[132,105,129,88],[132,107,129,89],[132,108,129,90],[132,110,129,92],[133,12,130,10,"params"],[133,18,130,16],[133,20,130,18,"routeParamList"],[133,34,130,32],[133,35,130,33,"name"],[133,39,130,37],[133,40,130,38],[133,45,130,43,"undefined"],[133,54,130,52],[133,57,130,52,"Object"],[133,63,130,52],[133,64,130,52,"assign"],[133,70,130,52],[133,75,131,15,"routeParamList"],[133,89,131,29],[133,90,131,30,"name"],[133,94,131,34],[133,95,131,35],[133,97,132,16,"route"],[133,102,132,21],[133,105,132,24,"route"],[133,110,132,29],[133,111,132,30,"params"],[133,117,132,36],[133,120,132,39,"undefined"],[133,129,132,48],[133,133,133,14,"route"],[133,138,133,19],[133,141,133,22,"route"],[133,146,133,27],[133,147,133,28,"params"],[133,153,133,34],[133,156,133,37,"undefined"],[134,10,133,46],[135,8,135,6],[135,9,135,7],[135,10,135,8],[136,8,136,6],[136,14,136,12,"index"],[136,19,136,17],[136,22,136,20,"Math"],[136,26,136,24],[136,27,136,25,"min"],[136,30,136,28],[136,31,136,29,"Math"],[136,35,136,33],[136,36,136,34,"max"],[136,39,136,37],[136,40,136,38,"routeNames"],[136,50,136,48],[136,51,136,49,"indexOf"],[136,58,136,56],[136,59,136,57,"state"],[136,64,136,62],[136,65,136,63,"routes"],[136,71,136,69],[136,72,136,70,"state"],[136,77,136,75],[136,79,136,77,"index"],[136,84,136,82],[136,88,136,86],[136,89,136,87],[136,90,136,88],[136,92,136,90,"name"],[136,96,136,94],[136,97,136,95],[136,99,136,97],[136,100,136,98],[136,101,136,99],[136,103,136,101,"routes"],[136,109,136,107],[136,110,136,108,"length"],[136,116,136,114],[136,119,136,117],[136,120,136,118],[136,121,136,119],[137,8,137,6],[137,14,137,12,"routeKeys"],[137,23,137,21],[137,26,137,24,"routes"],[137,32,137,30],[137,33,137,31,"map"],[137,36,137,34],[137,37,137,35,"route"],[137,42,137,40],[137,46,137,44,"route"],[137,51,137,49],[137,52,137,50,"key"],[137,55,137,53],[137,56,137,54],[138,8,138,6],[138,14,138,12,"history"],[138,21,138,19],[138,24,138,22,"state"],[138,29,138,27],[138,30,138,28,"history"],[138,37,138,35],[138,39,138,37,"filter"],[138,45,138,43],[138,46,138,44,"it"],[138,48,138,46],[138,52,138,50,"routeKeys"],[138,61,138,59],[138,62,138,60,"includes"],[138,70,138,68],[138,71,138,69,"it"],[138,73,138,71],[138,74,138,72,"key"],[138,77,138,75],[138,78,138,76],[138,79,138,77],[138,83,138,81],[138,85,138,83],[139,8,139,6],[139,15,139,13,"changeIndex"],[139,26,139,24],[139,27,139,25],[140,10,140,8,"stale"],[140,15,140,13],[140,17,140,15],[140,22,140,20],[141,10,141,8,"type"],[141,14,141,12],[141,16,141,14],[141,21,141,19],[142,10,142,8,"key"],[142,13,142,11],[142,15,142,13],[142,22,142,20],[142,26,142,20,"nanoid"],[142,43,142,26],[142,45,142,27],[142,46,142,28],[142,48,142,30],[143,10,143,8,"index"],[143,15,143,13],[144,10,144,8,"routeNames"],[144,20,144,18],[145,10,145,8,"history"],[145,17,145,15],[146,10,146,8,"routes"],[146,16,146,14],[147,10,147,8,"preloadedRouteKeys"],[147,28,147,26],[147,30,147,28,"state"],[147,35,147,33],[147,36,147,34,"preloadedRouteKeys"],[147,54,147,52],[147,56,147,54,"filter"],[147,62,147,60],[147,63,147,61,"key"],[147,66,147,64],[147,70,147,68,"routeKeys"],[147,79,147,77],[147,80,147,78,"includes"],[147,88,147,86],[147,89,147,87,"key"],[147,92,147,90],[147,93,147,91],[147,94,147,92],[147,98,147,96],[148,8,148,6],[148,9,148,7],[148,11,148,9,"index"],[148,16,148,14],[148,18,148,16,"backBehavior"],[148,30,148,28],[148,32,148,30,"initialRouteName"],[148,48,148,46],[148,49,148,47],[149,6,149,4],[149,7,149,5],[150,6,150,4,"getStateForRouteNamesChange"],[150,33,150,31,"getStateForRouteNamesChange"],[150,34,150,32,"state"],[150,39,150,37],[150,41,150,39],[151,8,151,6,"routeNames"],[151,18,151,16],[152,8,152,6,"routeParamList"],[152,22,152,20],[153,8,153,6,"routeKeyChanges"],[154,6,154,4],[154,7,154,5],[154,9,154,7],[155,8,155,6],[155,14,155,12,"routes"],[155,20,155,18],[155,23,155,21,"routeNames"],[155,33,155,31],[155,34,155,32,"map"],[155,37,155,35],[155,38,155,36,"name"],[155,42,155,40],[155,46,155,44,"state"],[155,51,155,49],[155,52,155,50,"routes"],[155,58,155,56],[155,59,155,57,"find"],[155,63,155,61],[155,64,155,62,"r"],[155,65,155,63],[155,69,155,67,"r"],[155,70,155,68],[155,71,155,69,"name"],[155,75,155,73],[155,80,155,78,"name"],[155,84,155,82],[155,88,155,86],[155,89,155,87,"routeKeyChanges"],[155,104,155,102],[155,105,155,103,"includes"],[155,113,155,111],[155,114,155,112,"r"],[155,115,155,113],[155,116,155,114,"name"],[155,120,155,118],[155,121,155,119],[155,122,155,120],[155,126,155,124],[156,10,156,8,"name"],[156,14,156,12],[157,10,157,8,"key"],[157,13,157,11],[157,15,157,13],[157,18,157,16,"name"],[157,22,157,20],[157,26,157,24],[157,30,157,24,"nanoid"],[157,47,157,30],[157,49,157,31],[157,50,157,32],[157,52,157,34],[158,10,158,8,"params"],[158,16,158,14],[158,18,158,16,"routeParamList"],[158,32,158,30],[158,33,158,31,"name"],[158,37,158,35],[159,8,159,6],[159,9,159,7],[159,10,159,8],[160,8,160,6],[160,14,160,12,"index"],[160,19,160,17],[160,22,160,20,"Math"],[160,26,160,24],[160,27,160,25,"max"],[160,30,160,28],[160,31,160,29],[160,32,160,30],[160,34,160,32,"routeNames"],[160,44,160,42],[160,45,160,43,"indexOf"],[160,52,160,50],[160,53,160,51,"state"],[160,58,160,56],[160,59,160,57,"routes"],[160,65,160,63],[160,66,160,64,"state"],[160,71,160,69],[160,72,160,70,"index"],[160,77,160,75],[160,78,160,76],[160,79,160,77,"name"],[160,83,160,81],[160,84,160,82],[160,85,160,83],[161,8,161,6],[161,12,161,10,"history"],[161,19,161,17],[161,22,161,20,"state"],[161,27,161,25],[161,28,161,26,"history"],[161,35,161,33],[161,36,161,34,"filter"],[161,42,161,40],[162,8,162,6],[163,8,163,6,"it"],[163,10,163,8],[163,14,163,12,"it"],[163,16,163,14],[163,17,163,15,"type"],[163,21,163,19],[163,26,163,24],[163,33,163,31],[163,37,163,35,"routes"],[163,43,163,41],[163,44,163,42,"find"],[163,48,163,46],[163,49,163,47,"r"],[163,50,163,48],[163,54,163,52,"r"],[163,55,163,53],[163,56,163,54,"key"],[163,59,163,57],[163,64,163,62,"it"],[163,66,163,64],[163,67,163,65,"key"],[163,70,163,68],[163,71,163,69],[163,72,163,70],[164,8,164,6],[164,12,164,10],[164,13,164,11,"history"],[164,20,164,18],[164,21,164,19,"length"],[164,27,164,25],[164,29,164,27],[165,10,165,8,"history"],[165,17,165,15],[165,20,165,18,"getRouteHistory"],[165,35,165,33],[165,36,165,34,"routes"],[165,42,165,40],[165,44,165,42,"index"],[165,49,165,47],[165,51,165,49,"backBehavior"],[165,63,165,61],[165,65,165,63,"initialRouteName"],[165,81,165,79],[165,82,165,80],[166,8,166,6],[167,8,167,6],[167,15,167,6,"Object"],[167,21,167,6],[167,22,167,6,"assign"],[167,28,167,6],[167,33,168,11,"state"],[167,38,168,16],[168,10,169,8,"history"],[168,17,169,15],[169,10,170,8,"routeNames"],[169,20,170,18],[170,10,171,8,"routes"],[170,16,171,14],[171,10,172,8,"index"],[172,8,172,13],[173,6,174,4],[173,7,174,5],[174,6,175,4,"getStateForRouteFocus"],[174,27,175,25,"getStateForRouteFocus"],[174,28,175,26,"state"],[174,33,175,31],[174,35,175,33,"key"],[174,38,175,36],[174,40,175,38],[175,8,176,6],[175,14,176,12,"index"],[175,19,176,17],[175,22,176,20,"state"],[175,27,176,25],[175,28,176,26,"routes"],[175,34,176,32],[175,35,176,33,"findIndex"],[175,44,176,42],[175,45,176,43,"r"],[175,46,176,44],[175,50,176,48,"r"],[175,51,176,49],[175,52,176,50,"key"],[175,55,176,53],[175,60,176,58,"key"],[175,63,176,61],[175,64,176,62],[176,8,177,6],[176,12,177,10,"index"],[176,17,177,15],[176,22,177,20],[176,23,177,21],[176,24,177,22],[176,28,177,26,"index"],[176,33,177,31],[176,38,177,36,"state"],[176,43,177,41],[176,44,177,42,"index"],[176,49,177,47],[176,51,177,49],[177,10,178,8],[177,17,178,15,"state"],[177,22,178,20],[178,8,179,6],[179,8,180,6],[179,15,180,13,"changeIndex"],[179,26,180,24],[179,27,180,25,"state"],[179,32,180,30],[179,34,180,32,"index"],[179,39,180,37],[179,41,180,39,"backBehavior"],[179,53,180,51],[179,55,180,53,"initialRouteName"],[179,71,180,69],[179,72,180,70],[180,6,181,4],[180,7,181,5],[181,6,182,4,"getStateForAction"],[181,23,182,21,"getStateForAction"],[181,24,182,22,"state"],[181,29,182,27],[181,31,182,29,"action"],[181,37,182,35],[181,39,182,37],[182,8,183,6,"routeParamList"],[182,22,183,20],[183,8,184,6,"routeGetIdList"],[184,6,185,4],[184,7,185,5],[184,9,185,7],[185,8,186,6],[185,16,186,14,"action"],[185,22,186,20],[185,23,186,21,"type"],[185,27,186,25],[186,10,187,8],[186,15,187,13],[186,24,187,22],[187,10,188,8],[187,15,188,13],[187,25,188,23],[188,10,189,8],[188,15,189,13],[188,36,189,34],[189,12,190,10],[190,14,191,12],[190,20,191,18,"index"],[190,25,191,23],[190,28,191,26,"state"],[190,33,191,31],[190,34,191,32,"routes"],[190,40,191,38],[190,41,191,39,"findIndex"],[190,50,191,48],[190,51,191,49,"route"],[190,56,191,54],[190,60,191,58,"route"],[190,65,191,63],[190,66,191,64,"name"],[190,70,191,68],[190,75,191,73,"action"],[190,81,191,79],[190,82,191,80,"payload"],[190,89,191,87],[190,90,191,88,"name"],[190,94,191,92],[190,95,191,93],[191,14,192,12],[191,18,192,16,"index"],[191,23,192,21],[191,28,192,26],[191,29,192,27],[191,30,192,28],[191,32,192,30],[192,16,193,14],[192,23,193,21],[192,27,193,25],[193,14,194,12],[194,14,195,12],[194,20,195,18,"updatedState"],[194,32,195,30],[194,35,195,33,"changeIndex"],[194,46,195,44],[194,47,195,44,"Object"],[194,53,195,44],[194,54,195,44,"assign"],[194,60,195,44],[194,65,196,17,"state"],[194,70,196,22],[195,16,197,14,"routes"],[195,22,197,20],[195,24,197,22,"state"],[195,29,197,27],[195,30,197,28,"routes"],[195,36,197,34],[195,37,197,35,"map"],[195,40,197,38],[195,41,197,39,"route"],[195,46,197,44],[195,50,197,48],[196,18,198,16],[196,22,198,20,"route"],[196,27,198,25],[196,28,198,26,"name"],[196,32,198,30],[196,37,198,35,"action"],[196,43,198,41],[196,44,198,42,"payload"],[196,51,198,49],[196,52,198,50,"name"],[196,56,198,54],[196,58,198,56],[197,20,199,18],[197,27,199,25,"route"],[197,32,199,30],[198,18,200,16],[199,18,201,16],[199,24,201,22,"getId"],[199,29,201,27],[199,32,201,30,"routeGetIdList"],[199,46,201,44],[199,47,201,45,"route"],[199,52,201,50],[199,53,201,51,"name"],[199,57,201,55],[199,58,201,56],[200,18,202,16],[200,24,202,22,"currentId"],[200,33,202,31],[200,36,202,34,"getId"],[200,41,202,39],[200,44,202,42],[201,20,203,18,"params"],[201,26,203,24],[201,28,203,26,"route"],[201,33,203,31],[201,34,203,32,"params"],[202,18,204,16],[202,19,204,17],[202,20,204,18],[203,18,205,16],[203,24,205,22,"nextId"],[203,30,205,28],[203,33,205,31,"getId"],[203,38,205,36],[203,41,205,39],[204,20,206,18,"params"],[204,26,206,24],[204,28,206,26,"action"],[204,34,206,32],[204,35,206,33,"payload"],[204,42,206,40],[204,43,206,41,"params"],[205,18,207,16],[205,19,207,17],[205,20,207,18],[206,18,208,16],[206,24,208,22,"key"],[206,27,208,25],[206,30,208,28,"currentId"],[206,39,208,37],[206,44,208,42,"nextId"],[206,50,208,48],[206,53,208,51,"route"],[206,58,208,56],[206,59,208,57,"key"],[206,62,208,60],[206,65,208,63],[206,68,208,66,"route"],[206,73,208,71],[206,74,208,72,"name"],[206,78,208,76],[206,82,208,80],[206,86,208,80,"nanoid"],[206,103,208,86],[206,105,208,87],[206,106,208,88],[206,108,208,90],[207,18,209,16],[207,22,209,20,"params"],[207,28,209,26],[208,18,210,16],[208,22,210,20],[208,23,210,21,"action"],[208,29,210,27],[208,30,210,28,"type"],[208,34,210,32],[208,39,210,37],[208,49,210,47],[208,53,210,51,"action"],[208,59,210,57],[208,60,210,58,"type"],[208,64,210,62],[208,69,210,67],[208,90,210,88],[208,95,210,93,"action"],[208,101,210,99],[208,102,210,100,"payload"],[208,109,210,107],[208,110,210,108,"merge"],[208,115,210,113],[208,119,210,117,"currentId"],[208,128,210,126],[208,133,210,131,"nextId"],[208,139,210,137],[208,141,210,139],[209,20,211,18,"params"],[209,26,211,24],[209,29,211,27,"action"],[209,35,211,33],[209,36,211,34,"payload"],[209,43,211,41],[209,44,211,42,"params"],[209,50,211,48],[209,55,211,53,"undefined"],[209,64,211,62],[209,68,211,66,"routeParamList"],[209,82,211,80],[209,83,211,81,"route"],[209,88,211,86],[209,89,211,87,"name"],[209,93,211,91],[209,94,211,92],[209,99,211,97,"undefined"],[209,108,211,106],[209,111,211,106,"Object"],[209,117,211,106],[209,118,211,106,"assign"],[209,124,211,106],[209,129,212,23,"routeParamList"],[209,143,212,37],[209,144,212,38,"route"],[209,149,212,43],[209,150,212,44,"name"],[209,154,212,48],[209,155,212,49],[209,157,213,23,"route"],[209,162,213,28],[209,163,213,29,"params"],[209,169,213,35],[209,171,214,23,"action"],[209,177,214,29],[209,178,214,30,"payload"],[209,185,214,37],[209,186,214,38,"params"],[209,192,214,44],[209,196,215,22,"route"],[209,201,215,27],[209,202,215,28,"params"],[209,208,215,34],[210,18,216,16],[210,19,216,17],[210,25,216,23],[211,20,217,18,"params"],[211,26,217,24],[211,29,217,27,"routeParamList"],[211,43,217,41],[211,44,217,42,"route"],[211,49,217,47],[211,50,217,48,"name"],[211,54,217,52],[211,55,217,53],[211,60,217,58,"undefined"],[211,69,217,67],[211,72,217,67,"Object"],[211,78,217,67],[211,79,217,67,"assign"],[211,85,217,67],[211,90,218,23,"routeParamList"],[211,104,218,37],[211,105,218,38,"route"],[211,110,218,43],[211,111,218,44,"name"],[211,115,218,48],[211,116,218,49],[211,118,219,23,"action"],[211,124,219,29],[211,125,219,30,"payload"],[211,132,219,37],[211,133,219,38,"params"],[211,139,219,44],[211,143,220,22,"action"],[211,149,220,28],[211,150,220,29,"payload"],[211,157,220,36],[211,158,220,37,"params"],[211,164,220,43],[212,18,221,16],[213,18,222,16],[213,24,222,22,"path"],[213,28,222,26],[213,31,222,29,"action"],[213,37,222,35],[213,38,222,36,"type"],[213,42,222,40],[213,47,222,45],[213,57,222,55],[213,61,222,59,"action"],[213,67,222,65],[213,68,222,66,"payload"],[213,75,222,73],[213,76,222,74,"path"],[213,80,222,78],[213,84,222,82],[213,88,222,86],[213,91,222,89,"action"],[213,97,222,95],[213,98,222,96,"payload"],[213,105,222,103],[213,106,222,104,"path"],[213,110,222,108],[213,113,222,111,"route"],[213,118,222,116],[213,119,222,117,"path"],[213,123,222,121],[214,18,223,16],[214,25,223,23,"params"],[214,31,223,29],[214,36,223,34,"route"],[214,41,223,39],[214,42,223,40,"params"],[214,48,223,46],[214,52,223,50,"path"],[214,56,223,54],[214,61,223,59,"route"],[214,66,223,64],[214,67,223,65,"path"],[214,71,223,69],[214,74,223,69,"Object"],[214,80,223,69],[214,81,223,69,"assign"],[214,87,223,69],[214,92,224,21,"route"],[214,97,224,26],[215,20,225,18,"key"],[215,23,225,21],[216,20,226,18,"path"],[216,24,226,22],[217,20,227,18,"params"],[218,18,227,24],[218,23,228,20,"route"],[218,28,228,25],[219,16,229,14],[219,17,229,15],[220,14,229,16],[220,18,230,15,"index"],[220,23,230,20],[220,25,230,22,"backBehavior"],[220,37,230,34],[220,39,230,36,"initialRouteName"],[220,55,230,52],[220,56,230,53],[221,14,231,12],[221,21,231,12,"Object"],[221,27,231,12],[221,28,231,12,"assign"],[221,34,231,12],[221,39,232,17,"updatedState"],[221,51,232,29],[222,16,233,14,"preloadedRouteKeys"],[222,34,233,32],[222,36,233,34,"updatedState"],[222,48,233,46],[222,49,233,47,"preloadedRouteKeys"],[222,67,233,65],[222,68,233,66,"filter"],[222,74,233,72],[222,75,233,73,"key"],[222,78,233,76],[222,82,233,80,"key"],[222,85,233,83],[222,90,233,88,"state"],[222,95,233,93],[222,96,233,94,"routes"],[222,102,233,100],[222,103,233,101,"updatedState"],[222,115,233,113],[222,116,233,114,"index"],[222,121,233,119],[222,122,233,120],[222,123,233,121,"key"],[222,126,233,124],[223,14,233,125],[224,12,235,10],[225,10,236,8],[225,15,236,13],[225,27,236,25],[226,10,237,8],[226,15,237,13],[226,31,237,29],[227,12,238,10],[228,14,239,12],[228,20,239,18,"nextState"],[228,29,239,27],[228,32,239,30,"BaseRouter"],[228,54,239,40],[228,55,239,41,"getStateForAction"],[228,72,239,58],[228,73,239,59,"state"],[228,78,239,64],[228,80,239,66,"action"],[228,86,239,72],[228,87,239,73],[229,14,240,12],[229,18,240,16,"nextState"],[229,27,240,25],[229,32,240,30],[229,36,240,34],[229,38,240,36],[230,16,241,14],[230,22,241,20,"index"],[230,27,241,25],[230,30,241,28,"nextState"],[230,39,241,37],[230,40,241,38,"index"],[230,45,241,43],[231,16,242,14],[231,20,242,18,"index"],[231,25,242,23],[231,29,242,27],[231,33,242,31],[231,35,242,33],[232,18,243,16],[232,24,243,22,"focusedRoute"],[232,36,243,34],[232,39,243,37,"nextState"],[232,48,243,46],[232,49,243,47,"routes"],[232,55,243,53],[232,56,243,54,"index"],[232,61,243,59],[232,62,243,60],[233,18,244,16],[233,24,244,22,"historyItemIndex"],[233,40,244,38],[233,43,244,41,"state"],[233,48,244,46],[233,49,244,47,"history"],[233,56,244,54],[233,57,244,55,"findLastIndex"],[233,70,244,68],[233,71,244,69,"item"],[233,75,244,73],[233,79,244,77,"item"],[233,83,244,81],[233,84,244,82,"key"],[233,87,244,85],[233,92,244,90,"focusedRoute"],[233,104,244,102],[233,105,244,103,"key"],[233,108,244,106],[233,109,244,107],[234,18,245,16],[234,22,245,20,"updatedHistory"],[234,36,245,34],[234,39,245,37,"state"],[234,44,245,42],[234,45,245,43,"history"],[234,52,245,50],[235,18,246,16],[235,22,246,20,"historyItemIndex"],[235,38,246,36],[235,43,246,41],[235,44,246,42],[235,45,246,43],[235,47,246,45],[236,20,247,18,"updatedHistory"],[236,34,247,32],[236,37,247,35],[236,38,247,36],[236,41,247,39,"state"],[236,46,247,44],[236,47,247,45,"history"],[236,54,247,52],[236,55,247,53],[237,20,248,18,"updatedHistory"],[237,34,248,32],[237,35,248,33,"historyItemIndex"],[237,51,248,49],[237,52,248,50],[237,55,248,50,"Object"],[237,61,248,50],[237,62,248,50,"assign"],[237,68,248,50],[237,73,249,23,"updatedHistory"],[237,87,249,37],[237,88,249,38,"historyItemIndex"],[237,104,249,54],[237,105,249,55],[238,22,250,20,"params"],[238,28,250,26],[238,30,250,28,"focusedRoute"],[238,42,250,40],[238,43,250,41,"params"],[239,20,250,47],[239,22,251,19],[240,18,252,16],[241,18,253,16],[241,25,253,16,"Object"],[241,31,253,16],[241,32,253,16,"assign"],[241,38,253,16],[241,43,254,21,"nextState"],[241,52,254,30],[242,20,255,18,"history"],[242,27,255,25],[242,29,255,27,"updatedHistory"],[243,18,255,41],[244,16,257,14],[245,14,258,12],[246,14,259,12],[246,21,259,19,"nextState"],[246,30,259,28],[247,12,260,10],[248,10,261,8],[248,15,261,13],[248,24,261,22],[249,12,262,10],[250,14,263,12],[250,18,263,16,"state"],[250,23,263,21],[250,24,263,22,"history"],[250,31,263,29],[250,32,263,30,"length"],[250,38,263,36],[250,43,263,41],[250,44,263,42],[250,46,263,44],[251,16,264,14],[251,23,264,21],[251,27,264,25],[252,14,265,12],[253,14,266,12],[253,20,266,18,"previousHistoryItem"],[253,39,266,37],[253,42,266,40,"state"],[253,47,266,45],[253,48,266,46,"history"],[253,55,266,53],[253,56,266,54,"state"],[253,61,266,59],[253,62,266,60,"history"],[253,69,266,67],[253,70,266,68,"length"],[253,76,266,74],[253,79,266,77],[253,80,266,78],[253,81,266,79],[254,14,267,12],[254,20,267,18,"previousKey"],[254,31,267,29],[254,34,267,32,"previousHistoryItem"],[254,53,267,51],[254,55,267,53,"key"],[254,58,267,56],[255,14,268,12],[255,20,268,18,"index"],[255,25,268,23],[255,28,268,26,"state"],[255,33,268,31],[255,34,268,32,"routes"],[255,40,268,38],[255,41,268,39,"findLastIndex"],[255,54,268,52],[255,55,268,53,"route"],[255,60,268,58],[255,64,268,62,"route"],[255,69,268,67],[255,70,268,68,"key"],[255,73,268,71],[255,78,268,76,"previousKey"],[255,89,268,87],[255,90,268,88],[256,14,269,12],[256,18,269,16,"index"],[256,23,269,21],[256,28,269,26],[256,29,269,27],[256,30,269,28],[256,32,269,30],[257,16,270,14],[257,23,270,21],[257,27,270,25],[258,14,271,12],[259,14,272,12],[259,18,272,16,"routes"],[259,24,272,22],[259,27,272,25,"state"],[259,32,272,30],[259,33,272,31,"routes"],[259,39,272,37],[260,14,273,12],[260,18,273,16,"backBehavior"],[260,30,273,28],[260,35,273,33],[260,48,273,46],[260,52,273,50,"routes"],[260,58,273,56],[260,59,273,57,"index"],[260,64,273,62],[260,65,273,63],[260,66,273,64,"params"],[260,72,273,70],[260,77,273,75,"previousHistoryItem"],[260,96,273,94],[260,97,273,95,"params"],[260,103,273,101],[260,105,273,103],[261,16,274,14,"routes"],[261,22,274,20],[261,25,274,23],[261,26,274,24],[261,29,274,27,"state"],[261,34,274,32],[261,35,274,33,"routes"],[261,41,274,39],[261,42,274,40],[262,16,275,14,"routes"],[262,22,275,20],[262,23,275,21,"index"],[262,28,275,26],[262,29,275,27],[262,32,275,27,"Object"],[262,38,275,27],[262,39,275,27,"assign"],[262,45,275,27],[262,50,276,19,"routes"],[262,56,276,25],[262,57,276,26,"index"],[262,62,276,31],[262,63,276,32],[263,18,277,16,"params"],[263,24,277,22],[263,26,277,24,"previousHistoryItem"],[263,45,277,43],[263,46,277,44,"params"],[264,16,277,50],[264,18,278,15],[265,14,279,12],[266,14,280,12],[266,21,280,12,"Object"],[266,27,280,12],[266,28,280,12,"assign"],[266,34,280,12],[266,39,281,17,"state"],[266,44,281,22],[267,16,282,14,"routes"],[267,22,282,20],[268,16,283,14,"preloadedRouteKeys"],[268,34,283,32],[268,36,283,34,"state"],[268,41,283,39],[268,42,283,40,"preloadedRouteKeys"],[268,60,283,58],[268,61,283,59,"filter"],[268,67,283,65],[268,68,283,66,"key"],[268,71,283,69],[268,75,283,73,"key"],[268,78,283,76],[268,83,283,81,"state"],[268,88,283,86],[268,89,283,87,"routes"],[268,95,283,93],[268,96,283,94,"index"],[268,101,283,99],[268,102,283,100],[268,103,283,101,"key"],[268,106,283,104],[268,107,283,105],[269,16,284,14,"history"],[269,23,284,21],[269,25,284,23,"state"],[269,30,284,28],[269,31,284,29,"history"],[269,38,284,36],[269,39,284,37,"slice"],[269,44,284,42],[269,45,284,43],[269,46,284,44],[269,48,284,46],[269,49,284,47],[269,50,284,48],[269,51,284,49],[270,16,285,14,"index"],[271,14,285,19],[272,12,287,10],[273,10,288,8],[273,15,288,13],[273,24,288,22],[274,12,289,10],[275,14,290,12],[275,20,290,18,"routeIndex"],[275,30,290,28],[275,33,290,31,"state"],[275,38,290,36],[275,39,290,37,"routes"],[275,45,290,43],[275,46,290,44,"findIndex"],[275,55,290,53],[275,56,290,54,"route"],[275,61,290,59],[275,65,290,63,"route"],[275,70,290,68],[275,71,290,69,"name"],[275,75,290,73],[275,80,290,78,"action"],[275,86,290,84],[275,87,290,85,"payload"],[275,94,290,92],[275,95,290,93,"name"],[275,99,290,97],[275,100,290,98],[276,14,291,12],[276,18,291,16,"routeIndex"],[276,28,291,26],[276,33,291,31],[276,34,291,32],[276,35,291,33],[276,37,291,35],[277,16,292,14],[277,23,292,21],[277,27,292,25],[278,14,293,12],[279,14,294,12],[279,20,294,18,"route"],[279,25,294,23],[279,28,294,26,"state"],[279,33,294,31],[279,34,294,32,"routes"],[279,40,294,38],[279,41,294,39,"routeIndex"],[279,51,294,49],[279,52,294,50],[280,14,295,12],[280,20,295,18,"getId"],[280,25,295,23],[280,28,295,26,"routeGetIdList"],[280,42,295,40],[280,43,295,41,"route"],[280,48,295,46],[280,49,295,47,"name"],[280,53,295,51],[280,54,295,52],[281,14,296,12],[281,20,296,18,"currentId"],[281,29,296,27],[281,32,296,30,"getId"],[281,37,296,35],[281,40,296,38],[282,16,297,14,"params"],[282,22,297,20],[282,24,297,22,"route"],[282,29,297,27],[282,30,297,28,"params"],[283,14,298,12],[283,15,298,13],[283,16,298,14],[284,14,299,12],[284,20,299,18,"nextId"],[284,26,299,24],[284,29,299,27,"getId"],[284,34,299,32],[284,37,299,35],[285,16,300,14,"params"],[285,22,300,20],[285,24,300,22,"action"],[285,30,300,28],[285,31,300,29,"payload"],[285,38,300,36],[285,39,300,37,"params"],[286,14,301,12],[286,15,301,13],[286,16,301,14],[287,14,302,12],[287,20,302,18,"key"],[287,23,302,21],[287,26,302,24,"currentId"],[287,35,302,33],[287,40,302,38,"nextId"],[287,46,302,44],[287,49,302,47,"route"],[287,54,302,52],[287,55,302,53,"key"],[287,58,302,56],[287,61,302,59],[287,64,302,62,"route"],[287,69,302,67],[287,70,302,68,"name"],[287,74,302,72],[287,78,302,76],[287,82,302,76,"nanoid"],[287,99,302,82],[287,101,302,83],[287,102,302,84],[287,104,302,86],[288,14,303,12],[288,20,303,18,"params"],[288,26,303,24],[288,29,303,27,"action"],[288,35,303,33],[288,36,303,34,"payload"],[288,43,303,41],[288,44,303,42,"params"],[288,50,303,48],[288,55,303,53,"undefined"],[288,64,303,62],[288,68,303,66,"routeParamList"],[288,82,303,80],[288,83,303,81,"route"],[288,88,303,86],[288,89,303,87,"name"],[288,93,303,91],[288,94,303,92],[288,99,303,97,"undefined"],[288,108,303,106],[288,111,303,106,"Object"],[288,117,303,106],[288,118,303,106,"assign"],[288,124,303,106],[288,129,304,17,"routeParamList"],[288,143,304,31],[288,144,304,32,"route"],[288,149,304,37],[288,150,304,38,"name"],[288,154,304,42],[288,155,304,43],[288,157,305,17,"action"],[288,163,305,23],[288,164,305,24,"payload"],[288,171,305,31],[288,172,305,32,"params"],[288,178,305,38],[288,182,306,16,"undefined"],[288,191,306,25],[289,14,307,12],[289,20,307,18,"newRoute"],[289,28,307,26],[289,31,307,29,"params"],[289,37,307,35],[289,42,307,40,"route"],[289,47,307,45],[289,48,307,46,"params"],[289,54,307,52],[289,57,307,52,"Object"],[289,63,307,52],[289,64,307,52,"assign"],[289,70,307,52],[289,75,308,17,"route"],[289,80,308,22],[290,16,309,14,"key"],[290,19,309,17],[291,16,310,14,"params"],[292,14,310,20],[292,19,311,16,"route"],[292,24,311,21],[293,14,312,12],[293,21,312,12,"Object"],[293,27,312,12],[293,28,312,12,"assign"],[293,34,312,12],[293,39,313,17,"state"],[293,44,313,22],[294,16,314,14,"preloadedRouteKeys"],[294,34,314,32],[294,36,314,34,"state"],[294,41,314,39],[294,42,314,40,"preloadedRouteKeys"],[294,60,314,58],[294,61,314,59,"filter"],[294,67,314,65],[294,68,314,66,"key"],[294,71,314,69],[294,75,314,73,"key"],[294,78,314,76],[294,83,314,81,"route"],[294,88,314,86],[294,89,314,87,"key"],[294,92,314,90],[294,93,314,91],[294,94,314,92,"concat"],[294,100,314,98],[294,101,314,99,"newRoute"],[294,109,314,107],[294,110,314,108,"key"],[294,113,314,111],[294,114,314,112],[295,16,315,14,"routes"],[295,22,315,20],[295,24,315,22,"state"],[295,29,315,27],[295,30,315,28,"routes"],[295,36,315,34],[295,37,315,35,"map"],[295,40,315,38],[295,41,315,39],[295,42,315,40,"route"],[295,47,315,45],[295,49,315,47,"index"],[295,54,315,52],[295,59,315,57,"index"],[295,64,315,62],[295,69,315,67,"routeIndex"],[295,79,315,77],[295,82,315,80,"newRoute"],[295,90,315,88],[295,93,315,91,"route"],[295,98,315,96],[295,99,315,97],[296,16,316,14,"history"],[296,23,316,21],[296,25,316,23,"key"],[296,28,316,26],[296,33,316,31,"route"],[296,38,316,36],[296,39,316,37,"key"],[296,42,316,40],[296,45,316,43,"state"],[296,50,316,48],[296,51,316,49,"history"],[296,58,316,56],[296,61,316,59,"state"],[296,66,316,64],[296,67,316,65,"history"],[296,74,316,72],[296,75,316,73,"filter"],[296,81,316,79],[296,82,316,80,"record"],[296,88,316,86],[296,92,316,90,"record"],[296,98,316,96],[296,99,316,97,"key"],[296,102,316,100],[296,107,316,105,"route"],[296,112,316,110],[296,113,316,111,"key"],[296,116,316,114],[297,14,316,115],[298,12,318,10],[299,10,319,8],[300,12,320,10],[300,19,320,17,"BaseRouter"],[300,41,320,27],[300,42,320,28,"getStateForAction"],[300,59,320,45],[300,60,320,46,"state"],[300,65,320,51],[300,67,320,53,"action"],[300,73,320,59],[300,74,320,60],[301,8,321,6],[302,6,322,4],[302,7,322,5],[303,6,323,4,"actionCreators"],[303,20,323,18],[303,22,323,20,"TabActions"],[304,4,323,30],[304,6,324,3],[305,4,325,2],[305,11,325,9,"router"],[305,17,325,15],[306,2,326,0],[307,0,326,1],[307,3]],"functionMap":{"names":["<global>","TabActions.jumpTo","getRouteHistory","routes.findIndex$argument_0","changeIndex","history.filter$argument_0","history.findLastIndex$argument_0","TabRouter","router.getInitialState","routeNames.map$argument_0","router.getRehydratedState","state.routes.find$argument_0","routes.map$argument_0","state.history.filter$argument_0","state.preloadedRouteKeys.filter$argument_0","router.getStateForRouteNamesChange","routes.find$argument_0","router.getStateForRouteFocus","state.routes.findIndex$argument_0","router.getStateForAction","state.routes.map$argument_0","updatedState.preloadedRouteKeys.filter$argument_0","state.history.findLastIndex$argument_0","state.routes.findLastIndex$argument_0"],"mappings":"AAA;ECM;GDQ;wBEE;2CCwB,wCD;CFe;oBIC;+BCM,+DD;8DEE,6BF;CJqB;OOC;ICO;oCCK;QDI;KDY;IGC;oCDQ;wCEC,oBF;OCU;mCEE,kBF;4CGC,gCH;6DIS,8BJ;KHE;IQC;oCNK,0BE,yDF;OMI;MFI,yCG,qBH,CE;KRW;IUC;2CCC,kBD;KVK;IYC;iDDS,2CC;uCCM;eDgC;yEEI,mDF;qEGW,qCH;qDIwB,kCJ;kELe,sCK;sDDO,2CC;kELwB,wBK;uCCC,yDD;gFNC,kCM;KZM;CPI"}},"type":"js/module"}]}